# Generated by Django 5.0.7 on 2025-09-21 10:39

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="AIPersonality",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField()),
                (
                    "personality_prompt",
                    models.TextField(help_text="System prompt for this AI personality"),
                ),
                (
                    "specialization",
                    models.CharField(
                        blank=True,
                        help_text="What this AI specializes in",
                        max_length=100,
                    ),
                ),
                (
                    "tone",
                    models.CharField(
                        default="supportive",
                        help_text="Communication tone",
                        max_length=50,
                    ),
                ),
                (
                    "response_style",
                    models.CharField(default="conversational", max_length=50),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "is_crisis_capable",
                    models.BooleanField(
                        default=False, help_text="Can handle crisis situations"
                    ),
                ),
                (
                    "max_conversation_length",
                    models.IntegerField(
                        default=50, help_text="Max messages in conversation"
                    ),
                ),
                ("avatar_url", models.URLField(blank=True)),
                (
                    "color_theme",
                    models.CharField(
                        default="#007bff", help_text="Hex color code", max_length=7
                    ),
                ),
                ("usage_count", models.PositiveIntegerField(default=0)),
                (
                    "average_rating",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=3),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ChatSession",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "session_type",
                    models.CharField(
                        choices=[
                            ("ai_chat", "AI Chat"),
                            ("counselor_chat", "Counselor Chat"),
                            ("group_chat", "Group Chat"),
                        ],
                        default="ai_chat",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("ended", "Ended"),
                            ("paused", "Paused"),
                            ("crisis_escalated", "Crisis Escalated"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True, help_text="Session title/topic", max_length=200
                    ),
                ),
                (
                    "crisis_level",
                    models.IntegerField(
                        default=0,
                        help_text="Crisis level from 0 (normal) to 10 (severe crisis)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "crisis_keywords_detected",
                    models.JSONField(blank=True, default=list),
                ),
                ("requires_intervention", models.BooleanField(default=False)),
                ("language", models.CharField(default="en", max_length=10)),
                (
                    "emotion_analysis",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="AI emotion analysis results",
                    ),
                ),
                (
                    "session_summary",
                    models.TextField(
                        blank=True, help_text="AI-generated session summary"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("ended_at", models.DateTimeField(blank=True, null=True)),
                (
                    "user_rating",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("user_feedback", models.TextField(blank=True)),
                (
                    "counselor",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={"role": "counselor"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="counselor_sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chat_sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ChatAnalytics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("total_messages", models.PositiveIntegerField(default=0)),
                ("user_message_count", models.PositiveIntegerField(default=0)),
                ("ai_response_count", models.PositiveIntegerField(default=0)),
                (
                    "average_response_time",
                    models.FloatField(
                        blank=True,
                        help_text="Average AI response time in seconds",
                        null=True,
                    ),
                ),
                ("overall_sentiment", models.CharField(blank=True, max_length=20)),
                (
                    "sentiment_trend",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Sentiment progression over time",
                    ),
                ),
                ("dominant_emotions", models.JSONField(blank=True, default=list)),
                ("main_topics", models.JSONField(blank=True, default=list)),
                ("keywords_mentioned", models.JSONField(blank=True, default=list)),
                ("crisis_keywords_count", models.PositiveIntegerField(default=0)),
                ("highest_crisis_level", models.IntegerField(default=0)),
                ("intervention_triggered", models.BooleanField(default=False)),
                ("ai_helpfulness_score", models.FloatField(blank=True, null=True)),
                (
                    "user_satisfaction_predicted",
                    models.FloatField(blank=True, null=True),
                ),
                ("ai_summary", models.TextField(blank=True)),
                ("recommendations", models.JSONField(blank=True, default=list)),
                ("follow_up_suggested", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "session",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="analytics",
                        to="chat.chatsession",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ChatTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                (
                    "template_type",
                    models.CharField(
                        choices=[
                            ("greeting", "Greeting"),
                            ("assessment", "Assessment Question"),
                            ("crisis_response", "Crisis Response"),
                            ("encouragement", "Encouragement"),
                            ("resource_suggestion", "Resource Suggestion"),
                            ("closure", "Session Closure"),
                        ],
                        max_length=30,
                    ),
                ),
                ("content", models.TextField()),
                (
                    "crisis_level_min",
                    models.IntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "crisis_level_max",
                    models.IntegerField(
                        default=10,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "target_emotions",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Target emotions for this template",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("language", models.CharField(default="en", max_length=10)),
                ("usage_count", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["template_type", "title"],
                "indexes": [
                    models.Index(
                        fields=["template_type", "is_active"],
                        name="chat_chatte_templat_7c0644_idx",
                    ),
                    models.Index(
                        fields=["crisis_level_min", "crisis_level_max"],
                        name="chat_chatte_crisis__2be037_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Message",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("content", models.TextField(help_text="Message content")),
                (
                    "message_type",
                    models.CharField(
                        choices=[
                            ("user", "User Message"),
                            ("ai", "AI Response"),
                            ("counselor", "Counselor Message"),
                            ("system", "System Message"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("sent", "Sent"),
                            ("delivered", "Delivered"),
                            ("read", "Read"),
                            ("failed", "Failed"),
                        ],
                        default="sent",
                        max_length=20,
                    ),
                ),
                (
                    "ai_model_used",
                    models.CharField(
                        blank=True,
                        help_text="AI model used for response",
                        max_length=50,
                    ),
                ),
                (
                    "ai_confidence",
                    models.FloatField(
                        blank=True, help_text="AI confidence score", null=True
                    ),
                ),
                ("ai_prompt_tokens", models.IntegerField(blank=True, null=True)),
                ("ai_completion_tokens", models.IntegerField(blank=True, null=True)),
                (
                    "sentiment_score",
                    models.FloatField(
                        blank=True, help_text="Sentiment analysis score", null=True
                    ),
                ),
                ("emotion_detected", models.CharField(blank=True, max_length=50)),
                ("crisis_indicators", models.JSONField(blank=True, default=list)),
                ("contains_crisis_keywords", models.BooleanField(default=False)),
                (
                    "translated_content",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Translations in different languages",
                    ),
                ),
                (
                    "attachments",
                    models.JSONField(
                        blank=True, default=list, help_text="File attachments metadata"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("read_at", models.DateTimeField(blank=True, null=True)),
                (
                    "sender",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sent_messages",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="messages",
                        to="chat.chatsession",
                    ),
                ),
            ],
            options={
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="MessageReaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "reaction_type",
                    models.CharField(
                        choices=[
                            ("like", "Like"),
                            ("helpful", "Helpful"),
                            ("not_helpful", "Not Helpful"),
                            ("concerning", "Concerning"),
                            ("inappropriate", "Inappropriate"),
                        ],
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "message",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reactions",
                        to="chat.message",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name="chatsession",
            index=models.Index(
                fields=["user", "status"], name="chat_chatse_user_id_7162c5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="chatsession",
            index=models.Index(
                fields=["counselor", "status"], name="chat_chatse_counsel_3bdf64_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="chatsession",
            index=models.Index(
                fields=["session_type", "status"], name="chat_chatse_session_43c084_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="chatsession",
            index=models.Index(
                fields=["crisis_level"], name="chat_chatse_crisis__dcd051_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="chatsession",
            index=models.Index(
                fields=["requires_intervention"], name="chat_chatse_require_e24b36_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="message",
            index=models.Index(
                fields=["session", "created_at"], name="chat_messag_session_4940cf_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="message",
            index=models.Index(
                fields=["sender", "created_at"], name="chat_messag_sender__b02346_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="message",
            index=models.Index(
                fields=["message_type"], name="chat_messag_message_973666_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="message",
            index=models.Index(
                fields=["contains_crisis_keywords"],
                name="chat_messag_contain_f6e637_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="message",
            index=models.Index(fields=["status"], name="chat_messag_status_8c4650_idx"),
        ),
        migrations.AddIndex(
            model_name="messagereaction",
            index=models.Index(
                fields=["message", "reaction_type"],
                name="chat_messag_message_b87cb7_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="messagereaction",
            unique_together={("message", "user")},
        ),
    ]
