# Generated by Django 5.2.6 on 2025-09-24 02:48

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("chat", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="CrisisType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField()),
                (
                    "severity_level",
                    models.IntegerField(
                        help_text="Default severity level (1-10)",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "trigger_keywords",
                    models.JSONField(
                        default=list, help_text="Keywords that trigger this crisis type"
                    ),
                ),
                (
                    "behavioral_indicators",
                    models.JSONField(default=list, help_text="Behavioral signs"),
                ),
                (
                    "emotional_indicators",
                    models.JSONField(default=list, help_text="Emotional signs"),
                ),
                (
                    "immediate_response",
                    models.TextField(help_text="Immediate response protocol"),
                ),
                ("escalation_criteria", models.TextField(help_text="When to escalate")),
                ("is_active", models.BooleanField(default=True)),
                ("requires_immediate_intervention", models.BooleanField(default=False)),
                ("auto_escalate", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["-severity_level", "name"],
            },
        ),
        migrations.CreateModel(
            name="CrisisAlert",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("acknowledged", "Acknowledged"),
                            ("in_progress", "In Progress"),
                            ("resolved", "Resolved"),
                            ("false_positive", "False Positive"),
                            ("escalated", "Escalated"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        choices=[
                            ("ai_detection", "AI Detection"),
                            ("self_report", "Self Report"),
                            ("peer_report", "Peer Report"),
                            ("counselor_assessment", "Counselor Assessment"),
                            ("assessment_result", "Assessment Result"),
                            ("system_trigger", "System Trigger"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "severity_level",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ]
                    ),
                ),
                (
                    "confidence_score",
                    models.FloatField(
                        help_text="AI confidence in crisis detection",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                ("description", models.TextField()),
                ("detected_keywords", models.JSONField(blank=True, default=list)),
                ("context_data", models.JSONField(blank=True, default=dict)),
                ("response_time", models.DurationField(blank=True, null=True)),
                ("resolution_time", models.DurationField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("acknowledged_at", models.DateTimeField(blank=True, null=True)),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                ("follow_up_required", models.BooleanField(default=True)),
                ("follow_up_date", models.DateTimeField(blank=True, null=True)),
                (
                    "assigned_counselor",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={"role": "counselor"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_crisis_alerts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "chat_session",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="crisis_alerts",
                        to="chat.chatsession",
                    ),
                ),
                (
                    "message",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="crisis_alerts",
                        to="chat.message",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="crisis_alerts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "crisis_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="crisis.crisistype",
                    ),
                ),
            ],
            options={
                "ordering": ["-severity_level", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="SafetyPlan",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(default="My Safety Plan", max_length=200)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("active", "Active"),
                            ("review_needed", "Review Needed"),
                            ("archived", "Archived"),
                        ],
                        default="draft",
                        max_length=20,
                    ),
                ),
                (
                    "warning_signs",
                    models.JSONField(default=list, help_text="Early warning signs"),
                ),
                (
                    "triggers",
                    models.JSONField(default=list, help_text="Known triggers"),
                ),
                (
                    "coping_strategies",
                    models.JSONField(
                        default=list, help_text="Self-help coping strategies"
                    ),
                ),
                (
                    "safe_spaces",
                    models.JSONField(default=list, help_text="Safe places to go"),
                ),
                (
                    "support_contacts",
                    models.JSONField(
                        default=list, help_text="Friends/family to contact"
                    ),
                ),
                (
                    "professional_contacts",
                    models.JSONField(
                        default=list, help_text="Mental health professionals"
                    ),
                ),
                (
                    "crisis_hotlines",
                    models.JSONField(default=list, help_text="Crisis hotline numbers"),
                ),
                (
                    "lethal_means_restriction",
                    models.TextField(
                        blank=True, help_text="Ways to restrict access to harmful items"
                    ),
                ),
                (
                    "environmental_safety",
                    models.TextField(blank=True, help_text="Making environment safer"),
                ),
                (
                    "emergency_procedures",
                    models.TextField(help_text="Step-by-step emergency procedures"),
                ),
                (
                    "when_to_call_911",
                    models.TextField(
                        help_text="Specific criteria for calling emergency services"
                    ),
                ),
                ("last_reviewed", models.DateTimeField(blank=True, null=True)),
                ("review_frequency_days", models.PositiveIntegerField(default=90)),
                ("times_activated", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="Counselor or admin who created this plan",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_safety_plans",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="safety_plans",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-updated_at"],
            },
        ),
        migrations.CreateModel(
            name="CrisisAnalytics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                ("total_alerts", models.PositiveIntegerField(default=0)),
                ("high_severity_alerts", models.PositiveIntegerField(default=0)),
                ("false_positives", models.PositiveIntegerField(default=0)),
                ("ai_detected_alerts", models.PositiveIntegerField(default=0)),
                ("average_response_time", models.DurationField(blank=True, null=True)),
                (
                    "average_resolution_time",
                    models.DurationField(blank=True, null=True),
                ),
                ("escalation_rate", models.FloatField(default=0.0)),
                ("successful_interventions", models.PositiveIntegerField(default=0)),
                ("follow_up_completion_rate", models.FloatField(default=0.0)),
                ("crisis_types_breakdown", models.JSONField(blank=True, default=dict)),
                ("peak_hours", models.JSONField(blank=True, default=list)),
                ("demographic_breakdown", models.JSONField(blank=True, default=dict)),
                ("ai_accuracy_rate", models.FloatField(default=0.0)),
                ("ai_precision", models.FloatField(default=0.0)),
                ("ai_recall", models.FloatField(default=0.0)),
                ("system_recommendations", models.JSONField(blank=True, default=list)),
                ("generated_at", models.DateTimeField(auto_now_add=True)),
                (
                    "generated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-generated_at"],
                "unique_together": {("start_date", "end_date")},
            },
        ),
        migrations.CreateModel(
            name="CrisisFollowUp",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "follow_up_type",
                    models.CharField(
                        choices=[
                            ("check_in", "Wellness Check-in"),
                            ("assessment", "Follow-up Assessment"),
                            ("appointment", "Scheduled Appointment"),
                            ("safety_plan_review", "Safety Plan Review"),
                            ("resource_check", "Resource Effectiveness Check"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("scheduled", "Scheduled"),
                            ("completed", "Completed"),
                            ("missed", "Missed"),
                            ("cancelled", "Cancelled"),
                            ("rescheduled", "Rescheduled"),
                        ],
                        default="scheduled",
                        max_length=20,
                    ),
                ),
                ("scheduled_date", models.DateTimeField()),
                ("purpose", models.TextField()),
                ("notes", models.TextField(blank=True)),
                ("outcome", models.TextField(blank=True)),
                ("user_status", models.CharField(blank=True, max_length=100)),
                ("additional_support_needed", models.BooleanField(default=False)),
                ("new_concerns", models.TextField(blank=True)),
                ("next_follow_up_date", models.DateTimeField(blank=True, null=True)),
                ("recommendations", models.JSONField(blank=True, default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "alert",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="follow_ups",
                        to="crisis.crisisalert",
                    ),
                ),
                (
                    "assigned_to",
                    models.ForeignKey(
                        limit_choices_to={"role__in": ["counselor", "admin"]},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assigned_follow_ups",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-scheduled_date"],
                "indexes": [
                    models.Index(
                        fields=["assigned_to", "status"],
                        name="crisis_cris_assigne_b04b98_idx",
                    ),
                    models.Index(
                        fields=["scheduled_date", "status"],
                        name="crisis_cris_schedul_35d91e_idx",
                    ),
                    models.Index(
                        fields=["alert"], name="crisis_cris_alert_i_98e760_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="CrisisResponse",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "response_type",
                    models.CharField(
                        choices=[
                            ("immediate_contact", "Immediate Contact"),
                            ("safety_plan", "Safety Plan Activation"),
                            ("emergency_services", "Emergency Services"),
                            ("counselor_assignment", "Counselor Assignment"),
                            ("resource_provision", "Resource Provision"),
                            ("follow_up_schedule", "Follow-up Schedule"),
                            ("escalation", "Escalation"),
                            ("monitoring", "Increased Monitoring"),
                        ],
                        max_length=30,
                    ),
                ),
                ("description", models.TextField()),
                ("actions_taken", models.JSONField(blank=True, default=list)),
                ("was_effective", models.BooleanField(blank=True, null=True)),
                (
                    "user_response",
                    models.TextField(blank=True, help_text="How the user responded"),
                ),
                ("next_steps", models.TextField(blank=True)),
                ("resources_provided", models.JSONField(blank=True, default=list)),
                ("contacts_made", models.JSONField(blank=True, default=list)),
                (
                    "response_time",
                    models.DurationField(help_text="Time from alert to response"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "alert",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="responses",
                        to="crisis.crisisalert",
                    ),
                ),
                (
                    "responder",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="crisis_responses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["alert", "response_type"],
                        name="crisis_cris_alert_i_13ab00_idx",
                    ),
                    models.Index(
                        fields=["responder"], name="crisis_cris_respond_920278_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="CrisisResource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "resource_type",
                    models.CharField(
                        choices=[
                            ("hotline", "Crisis Hotline"),
                            ("emergency_service", "Emergency Service"),
                            ("online_chat", "Online Chat Support"),
                            ("text_service", "Text/SMS Service"),
                            ("mobile_app", "Mobile App"),
                            ("website", "Website Resource"),
                            ("local_service", "Local Service"),
                            ("self_help_tool", "Self-Help Tool"),
                        ],
                        max_length=20,
                    ),
                ),
                ("phone_number", models.CharField(blank=True, max_length=20)),
                ("text_number", models.CharField(blank=True, max_length=20)),
                ("email", models.EmailField(blank=True, max_length=254)),
                ("website_url", models.URLField(blank=True)),
                ("chat_url", models.URLField(blank=True)),
                (
                    "availability",
                    models.CharField(
                        choices=[
                            ("24/7", "24/7 Available"),
                            ("business", "Business Hours"),
                            ("evenings", "Evenings/Weekends"),
                            ("limited", "Limited Hours"),
                        ],
                        max_length=20,
                    ),
                ),
                ("availability_details", models.TextField(blank=True)),
                ("location", models.CharField(blank=True, max_length=200)),
                ("serves_areas", models.JSONField(blank=True, default=list)),
                ("target_demographics", models.JSONField(blank=True, default=list)),
                ("languages_supported", models.JSONField(blank=True, default=list)),
                ("is_verified", models.BooleanField(default=False)),
                ("is_free", models.BooleanField(default=True)),
                ("requires_insurance", models.BooleanField(default=False)),
                ("click_count", models.PositiveIntegerField(default=0)),
                ("rating", models.FloatField(default=0.0)),
                ("is_active", models.BooleanField(default=True)),
                ("is_featured", models.BooleanField(default=False)),
                ("display_order", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "crisis_types",
                    models.ManyToManyField(blank=True, to="crisis.crisistype"),
                ),
            ],
            options={
                "ordering": ["display_order", "-is_featured", "name"],
                "indexes": [
                    models.Index(
                        fields=["resource_type", "is_active"],
                        name="crisis_cris_resourc_200b57_idx",
                    ),
                    models.Index(
                        fields=["is_featured", "is_active"],
                        name="crisis_cris_is_feat_3542f8_idx",
                    ),
                    models.Index(
                        fields=["availability"], name="crisis_cris_availab_c40af1_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="crisisalert",
            index=models.Index(
                fields=["user", "status"], name="crisis_cris_user_id_dec12c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="crisisalert",
            index=models.Index(
                fields=["severity_level", "status"],
                name="crisis_cris_severit_4f1757_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="crisisalert",
            index=models.Index(
                fields=["assigned_counselor", "status"],
                name="crisis_cris_assigne_a19a8c_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="crisisalert",
            index=models.Index(fields=["source"], name="crisis_cris_source_24f6bb_idx"),
        ),
        migrations.AddIndex(
            model_name="crisisalert",
            index=models.Index(
                fields=["created_at"], name="crisis_cris_created_3e6c2d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="safetyplan",
            index=models.Index(
                fields=["user", "status"], name="crisis_safe_user_id_7720ba_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="safetyplan",
            index=models.Index(fields=["status"], name="crisis_safe_status_9d0bba_idx"),
        ),
    ]
